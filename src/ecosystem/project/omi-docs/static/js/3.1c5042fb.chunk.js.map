{"version":3,"sources":["../static/js/3.1c5042fb.chunk.js","docs/zh-cn/ref.md"],"names":["webpackJsonp","65","module","exports"],"mappings":"AAAAA,cAAc,IAERC,GACA,SAAUC,EAAQC,GCHxBD,EAAAC,QAAA","file":"static/js/3.1c5042fb.chunk.js","sourcesContent":["webpackJsonp([3],{\n\n/***/ 65:\n/***/ (function(module, exports) {\n\nmodule.exports = \"## Ref\\n\\n```jsx\\ndefine('my-element', class extends WeElement {\\n  onClick = (evt) => {\\n    console.log(this.h1)\\n  }\\n\\n  render(props) {\\n    return (\\n      <div>\\n        <h1 ref={e => { this.h1 = e }} onClick={this.onClick}>Hello, world!</h1>\\n      </div>\\n    )\\n  }\\n})\\n```\\n\\n在元素上添加 `ref={e => { this.anyNameYouWant = e }}` ，然后你就可以 JS 代码里使用 `this.anyNameYouWant` 访问该元素。你可以使用两种方式来提高 update 的性能：\\n\\n* 提前赋值\\n* createRef\\n\\n### 提前赋值\\n\\n```jsx\\ndefine('my-element', class extends WeElement {\\n  onClick = (evt) => {\\n    console.log(this.h1)\\n  }\\n\\n  myRef = e => { this.h1 = e }\\n\\n  render(props) {\\n    return (\\n      <div>\\n        <h1 ref={this.myRef} onClick={this.onClick}>Hello, world!</h1>\\n      </div>\\n    )\\n  }\\n})\\n```\\n\\n### createRef\\n\\n你也可以使用 `createRef` 来得到更高的性能:\\n\\n```jsx\\ndefine('my-element', class extends WeElement {\\n  onClick = (evt) => {\\n    console.log(this.myRef.current)  //h1\\n  }\\n\\n  myRef = createRef()\\n\\n  render(props) {\\n    return (\\n      <div>\\n        <h1 ref={this.myRef} onClick={this.onClick}>Hello, world!</h1>\\n      </div>\\n    )\\n  }\\n})\\n```\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/3.1c5042fb.chunk.js","module.exports = \"## Ref\\n\\n```jsx\\ndefine('my-element', class extends WeElement {\\n  onClick = (evt) => {\\n    console.log(this.h1)\\n  }\\n\\n  render(props) {\\n    return (\\n      <div>\\n        <h1 ref={e => { this.h1 = e }} onClick={this.onClick}>Hello, world!</h1>\\n      </div>\\n    )\\n  }\\n})\\n```\\n\\n在元素上添加 `ref={e => { this.anyNameYouWant = e }}` ，然后你就可以 JS 代码里使用 `this.anyNameYouWant` 访问该元素。你可以使用两种方式来提高 update 的性能：\\n\\n* 提前赋值\\n* createRef\\n\\n### 提前赋值\\n\\n```jsx\\ndefine('my-element', class extends WeElement {\\n  onClick = (evt) => {\\n    console.log(this.h1)\\n  }\\n\\n  myRef = e => { this.h1 = e }\\n\\n  render(props) {\\n    return (\\n      <div>\\n        <h1 ref={this.myRef} onClick={this.onClick}>Hello, world!</h1>\\n      </div>\\n    )\\n  }\\n})\\n```\\n\\n### createRef\\n\\n你也可以使用 `createRef` 来得到更高的性能:\\n\\n```jsx\\ndefine('my-element', class extends WeElement {\\n  onClick = (evt) => {\\n    console.log(this.myRef.current)  //h1\\n  }\\n\\n  myRef = createRef()\\n\\n  render(props) {\\n    return (\\n      <div>\\n        <h1 ref={this.myRef} onClick={this.onClick}>Hello, world!</h1>\\n      </div>\\n    )\\n  }\\n})\\n```\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/zh-cn/ref.md\n// module id = 65\n// module chunks = 3"],"sourceRoot":""}