{"version":3,"sources":["../static/js/11.a7b0d9ea.chunk.js","docs/zh-cn/introduction.md"],"names":["webpackJsonp","57","module","exports"],"mappings":"AAAAA,cAAc,KAERC,GACA,SAAUC,EAAQC,GCHxBD,EAAAC,QAAA","file":"static/js/11.a7b0d9ea.chunk.js","sourcesContent":["webpackJsonp([11],{\n\n/***/ 57:\n/***/ (function(module, exports) {\n\nmodule.exports = \"<!-- <p align=\\\"center\\\"><img src=\\\"https://github.com/Tencent/omi/raw/master/assets/omi-logo2019.svg?sanitize=true\\\" alt=\\\"omi\\\" width=\\\"300\\\"/></p>\\n<h2 align=\\\"center\\\">Omi - 下一代前端框架，去万物糟粕，合精华为一点点 JS</h2>\\n<p align=\\\"center\\\"><b>基于 Web Components 并支持 IE8+(omio) 和 小程序(omip)</b></p>\\n -->\\n\\n## Omi 是什么？\\n\\nOmi (读音 /ˈomɪ/，类似于 欧米) 是下一代前端框架，基于 Web Components 设计，支持 PC Web、移动 H5 和小程序开发(One framework. Mobile & desktop & mini program)。\\n\\n\\n<em> Omi looks really neat!<br> </em>\\n　　　　— [Jason Miller (Creator of Preact)](https://twitter.com/_developit/)\\n\\n<em> I really like the trend towards \\\"frameworks\\\" that:<br><br>\\\"export default class WeElement extends HTMLElement {..}\\\"<br> <br>This one, Omi, is from Tencent.</em>       \\n　　　　— [Dion Almaer](https://twitter.com/dalmaer/)\\n\\n## 一个 HTML 完全上手\\n\\n下面这个页面不需要任何构建工具就可以执行:\\n\\n```html\\n<script src=\\\"https://unpkg.com/omi\\\"></script>\\n<script>\\n  const { define, WeElement, html, render } = Omi\\n\\n  define('my-counter', class extends WeElement {\\n    install() {\\n      this.data.count = 1\\n      this.sub = this.sub.bind(this)\\n      this.add = this.add.bind(this)\\n    }\\n\\n    sub() {\\n      this.data.count--\\n      this.update()\\n    }\\n\\n    add() {\\n      this.data.count++\\n      this.update()\\n    }\\n\\n    render() {\\n      return html`\\n        <div>\\n          <button onClick=${this.sub}>-</button>\\n          <span>${this.data.count}</span>\\n          <button onClick=${this.add}>+</button>\\n        </div>\\n        `}\\n  })\\n\\n  render(html`<my-counter />`, 'body')\\n</script>\\n```\\n\\n通过上面脚本的执行，你已经定义好了一个自定义标签，可以不使用 render 方法，直接使用 `my-counter` 标签：\\n\\n```jsx\\n<body>\\n  <my-counter></my-counter>\\n</body>\\n```\\n\\n* [点击这里看执行结果](https://tencent.github.io/omi/assets/omi.html)\\n\\n上面使用的是 hyperscript 的方式来书写 HTML 结构，用 ES5 书写 JS ，你可以使用 JSX 和 ES2015+ 来替代它们。\\n\\n\\n```jsx {8-11}\\nimport { render, WeElement, define } from 'omi'\\n\\ndefine('my-counter', class extends WeElement {\\n  data = {\\n    count: 1\\n  }\\n\\n  static css = `\\n    span{\\n        color: red;\\n    }`\\n\\n  sub = () => {\\n    this.data.count--\\n    this.update()\\n  }\\n\\n  add = () => {\\n    this.data.count++\\n    this.update()\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <button onClick={this.sub}>-</button>\\n        <span>{this.data.count}</span>\\n        <button onClick={this.add}>+</button>\\n      </div>\\n    )\\n  }\\n})\\n\\nrender(<my-counter />, 'body')\\n```\\n\\n看上面高亮的部分，可以给组件加样式，比如上面的 span 的作用域仅仅在组件内部，不会污染别的组件。到现在你已经成功入门 Omi 了！你学会了:\\n\\n* 为组件添加**结构**，如上面使用 JSX 书写结构\\n* 为组件添加**行为**，如上面的 `onClick` 绑定事件\\n* 为组件添加**样式**，如上面的 `static css`\\n* 渲染组件到 body，当然也可以把组件渲染到任意其他组件\\n\\n恭喜你！\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/11.a7b0d9ea.chunk.js","module.exports = \"<!-- <p align=\\\"center\\\"><img src=\\\"https://github.com/Tencent/omi/raw/master/assets/omi-logo2019.svg?sanitize=true\\\" alt=\\\"omi\\\" width=\\\"300\\\"/></p>\\n<h2 align=\\\"center\\\">Omi - 下一代前端框架，去万物糟粕，合精华为一点点 JS</h2>\\n<p align=\\\"center\\\"><b>基于 Web Components 并支持 IE8+(omio) 和 小程序(omip)</b></p>\\n -->\\n\\n## Omi 是什么？\\n\\nOmi (读音 /ˈomɪ/，类似于 欧米) 是下一代前端框架，基于 Web Components 设计，支持 PC Web、移动 H5 和小程序开发(One framework. Mobile & desktop & mini program)。\\n\\n\\n<em> Omi looks really neat!<br> </em>\\n　　　　— [Jason Miller (Creator of Preact)](https://twitter.com/_developit/)\\n\\n<em> I really like the trend towards \\\"frameworks\\\" that:<br><br>\\\"export default class WeElement extends HTMLElement {..}\\\"<br> <br>This one, Omi, is from Tencent.</em>       \\n　　　　— [Dion Almaer](https://twitter.com/dalmaer/)\\n\\n## 一个 HTML 完全上手\\n\\n下面这个页面不需要任何构建工具就可以执行:\\n\\n```html\\n<script src=\\\"https://unpkg.com/omi\\\"></script>\\n<script>\\n  const { define, WeElement, html, render } = Omi\\n\\n  define('my-counter', class extends WeElement {\\n    install() {\\n      this.data.count = 1\\n      this.sub = this.sub.bind(this)\\n      this.add = this.add.bind(this)\\n    }\\n\\n    sub() {\\n      this.data.count--\\n      this.update()\\n    }\\n\\n    add() {\\n      this.data.count++\\n      this.update()\\n    }\\n\\n    render() {\\n      return html`\\n        <div>\\n          <button onClick=${this.sub}>-</button>\\n          <span>${this.data.count}</span>\\n          <button onClick=${this.add}>+</button>\\n        </div>\\n        `}\\n  })\\n\\n  render(html`<my-counter />`, 'body')\\n</script>\\n```\\n\\n通过上面脚本的执行，你已经定义好了一个自定义标签，可以不使用 render 方法，直接使用 `my-counter` 标签：\\n\\n```jsx\\n<body>\\n  <my-counter></my-counter>\\n</body>\\n```\\n\\n* [点击这里看执行结果](https://tencent.github.io/omi/assets/omi.html)\\n\\n上面使用的是 hyperscript 的方式来书写 HTML 结构，用 ES5 书写 JS ，你可以使用 JSX 和 ES2015+ 来替代它们。\\n\\n\\n```jsx {8-11}\\nimport { render, WeElement, define } from 'omi'\\n\\ndefine('my-counter', class extends WeElement {\\n  data = {\\n    count: 1\\n  }\\n\\n  static css = `\\n    span{\\n        color: red;\\n    }`\\n\\n  sub = () => {\\n    this.data.count--\\n    this.update()\\n  }\\n\\n  add = () => {\\n    this.data.count++\\n    this.update()\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <button onClick={this.sub}>-</button>\\n        <span>{this.data.count}</span>\\n        <button onClick={this.add}>+</button>\\n      </div>\\n    )\\n  }\\n})\\n\\nrender(<my-counter />, 'body')\\n```\\n\\n看上面高亮的部分，可以给组件加样式，比如上面的 span 的作用域仅仅在组件内部，不会污染别的组件。到现在你已经成功入门 Omi 了！你学会了:\\n\\n* 为组件添加**结构**，如上面使用 JSX 书写结构\\n* 为组件添加**行为**，如上面的 `onClick` 绑定事件\\n* 为组件添加**样式**，如上面的 `static css`\\n* 渲染组件到 body，当然也可以把组件渲染到任意其他组件\\n\\n恭喜你！\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/zh-cn/introduction.md\n// module id = 57\n// module chunks = 11"],"sourceRoot":""}