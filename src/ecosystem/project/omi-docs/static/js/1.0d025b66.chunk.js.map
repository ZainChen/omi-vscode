{"version":3,"sources":["../static/js/1.0d025b66.chunk.js","docs/zh-cn/ssr.md"],"names":["webpackJsonp","67","module","exports"],"mappings":"AAAAA,cAAc,IAERC,GACA,SAAUC,EAAQC,GCHxBD,EAAAC,QAAA","file":"static/js/1.0d025b66.chunk.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 67:\n/***/ (function(module, exports) {\n\nmodule.exports = \"## 服务器端渲染\\n\\n服务器端渲染英文叫 Server-Side Rendering，简称 SSR，有两大优势:\\n\\n* 对 SEO 友好\\n* 更快的首屏展示时间\\n\\n用服务器端渲染 (SSR) 也有缺点，比如增加服务器端开销。开发者可以自行权衡是否使用 SSR，或者直接使用 [omi-snap](https://github.com/Tencent/omi/blob/master/tutorial/omi-snap.cn.md) 预渲染，预渲染不需要服务器端额外的开销，直接在构建时候无头浏览器生成骨架屏，所以也就没有动态数据内容，而 SSR 可以返回动态数据生成的HTML，还可以把数据序列化与 HTML 一同返回。\\n\\n## 快速使用\\n\\n```bash\\n$ npm i omi-cli -g      # 全局安装 cli\\n$ omi init-s my-app     # 初始化项目 \\n$ cd my-app           \\n$ npm start             # 开发\\n$ npm run build         # 发布\\n```\\n\\n## 原理解析\\n\\n定义组件：\\n\\n```jsx\\nimport { WeElement, define } from 'omio'\\n\\ndefine('my-element', class extends WeElement {\\n  install() {\\n    this.data = { liked: false }\\n  }\\n\\n  static css = 'button{ color: red; }'\\n\\n  render() {\\n    if (this.data.liked) {\\n      return 'You liked this.'\\n    }\\n\\n    return <button onClick={() => {\\n      this.data.liked = true\\n      this.update()\\n    }} >Like</button>\\n  }\\n})\\n```\\n\\n注意这里使用了 omio，SSR 只能使用 omio，而不能使用 omi，因为 omi 是 web components，node 无法渲染 web components。\\n\\n> omi 和 omio 项目都必须使用 omio 进行 SSR\\n\\n起个 node 服务器:\\n\\n```jsx\\nvar express = require('express')\\nvar app = express()\\nvar Omi = require('omio')\\nrequire('./my-element')\\n\\napp.get('/', function (req, res) {\\n  const obj = Omi.renderToString(<my-element />)\\n  res.end(`<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <title>Omi SSR</title>\\n    ${toString(obj.css)}\\n  </head>\\n  <body>${obj.html}</body>\\n</html>`)\\n})\\n\\nfunction toString(css){\\n  return (\\n     css.map(style => {\\n          return `<style id=\\\"${style.id}\\\">${style.css}</style>`\\n      }\\n    ))\\n  )\\n}\\n\\napp.listen(3000)\\n```\\n\\n直出的 HTML 结构:\\n\\n```html\\n<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <title>Omi SSR</title>\\n    <style type=\\\"text/css\\\" id=\\\"_ss0\\\">button[_ss0]{color:red;}</style>\\n  </head>\\n  <body><button _ss0>Like</button></body>\\n</html>\\n```\\n\\n显示效果:\\n\\n![](https://github.com/Tencent/omi/raw/master/assets/hello-ssr.png)\\n\\n\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/1.0d025b66.chunk.js","module.exports = \"## 服务器端渲染\\n\\n服务器端渲染英文叫 Server-Side Rendering，简称 SSR，有两大优势:\\n\\n* 对 SEO 友好\\n* 更快的首屏展示时间\\n\\n用服务器端渲染 (SSR) 也有缺点，比如增加服务器端开销。开发者可以自行权衡是否使用 SSR，或者直接使用 [omi-snap](https://github.com/Tencent/omi/blob/master/tutorial/omi-snap.cn.md) 预渲染，预渲染不需要服务器端额外的开销，直接在构建时候无头浏览器生成骨架屏，所以也就没有动态数据内容，而 SSR 可以返回动态数据生成的HTML，还可以把数据序列化与 HTML 一同返回。\\n\\n## 快速使用\\n\\n```bash\\n$ npm i omi-cli -g      # 全局安装 cli\\n$ omi init-s my-app     # 初始化项目 \\n$ cd my-app           \\n$ npm start             # 开发\\n$ npm run build         # 发布\\n```\\n\\n## 原理解析\\n\\n定义组件：\\n\\n```jsx\\nimport { WeElement, define } from 'omio'\\n\\ndefine('my-element', class extends WeElement {\\n  install() {\\n    this.data = { liked: false }\\n  }\\n\\n  static css = 'button{ color: red; }'\\n\\n  render() {\\n    if (this.data.liked) {\\n      return 'You liked this.'\\n    }\\n\\n    return <button onClick={() => {\\n      this.data.liked = true\\n      this.update()\\n    }} >Like</button>\\n  }\\n})\\n```\\n\\n注意这里使用了 omio，SSR 只能使用 omio，而不能使用 omi，因为 omi 是 web components，node 无法渲染 web components。\\n\\n> omi 和 omio 项目都必须使用 omio 进行 SSR\\n\\n起个 node 服务器:\\n\\n```jsx\\nvar express = require('express')\\nvar app = express()\\nvar Omi = require('omio')\\nrequire('./my-element')\\n\\napp.get('/', function (req, res) {\\n  const obj = Omi.renderToString(<my-element />)\\n  res.end(`<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <title>Omi SSR</title>\\n    ${toString(obj.css)}\\n  </head>\\n  <body>${obj.html}</body>\\n</html>`)\\n})\\n\\nfunction toString(css){\\n  return (\\n     css.map(style => {\\n          return `<style id=\\\"${style.id}\\\">${style.css}</style>`\\n      }\\n    ))\\n  )\\n}\\n\\napp.listen(3000)\\n```\\n\\n直出的 HTML 结构:\\n\\n```html\\n<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <title>Omi SSR</title>\\n    <style type=\\\"text/css\\\" id=\\\"_ss0\\\">button[_ss0]{color:red;}</style>\\n  </head>\\n  <body><button _ss0>Like</button></body>\\n</html>\\n```\\n\\n显示效果:\\n\\n![](https://github.com/Tencent/omi/raw/master/assets/hello-ssr.png)\\n\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/zh-cn/ssr.md\n// module id = 67\n// module chunks = 1"],"sourceRoot":""}