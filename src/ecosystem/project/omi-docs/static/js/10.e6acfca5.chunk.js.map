{"version":3,"sources":["../static/js/10.e6acfca5.chunk.js","docs/zh-cn/jsx.md"],"names":["webpackJsonp","58","module","exports"],"mappings":"AAAAA,cAAc,KAERC,GACA,SAAUC,EAAQC,GCHxBD,EAAAC,QAAA","file":"static/js/10.e6acfca5.chunk.js","sourcesContent":["webpackJsonp([10],{\n\n/***/ 58:\n/***/ (function(module, exports) {\n\nmodule.exports = \"## JSX\\n\\nJSX 是目前为止开发体验最棒、语法噪音最少、表达能力最强且图灵完备的 UI 表达式，模板引擎不完备，模板字符串图灵完备但是语法噪音太大。即：\\n\\n```js\\nJSX > JS\\n```\\n\\n## Hello JSX\\n\\n使用 JSX，可以在 JS 中书写闭合的 XML 标签来表达 DOM 结构等，比如:\\n\\n```jsx\\nconst element = <h1>Hello, world!</h1>\\n```\\n\\n## 数据绑定\\n\\n据绑定使用单括号将变量或表达式、或JS语句块包起来：\\n\\n```jsx\\n<h1>{user.name}</h1>\\n```\\n\\n在 Omi 的 render 里试试:\\n\\n```jsx\\ndefine('my-element', class extends WeElement {\\n  render(props) {\\n    return <h1>{props.name}</h1>\\n  }\\n})\\n```\\n\\n使用元素:\\n\\n```jsx\\n<my-element name='dntzhang' />\\n```\\n\\n还可以写表达式:\\n\\n```jsx\\n<h1>{user.age > 18 ? '成年' : '未成年'}<h1>\\n```\\n\\n表达式里也可以嵌入 JSX：\\n\\n```jsx\\n<h1>{ user.age > 18 ? <div>成年</div> : <div>未成年</div> }<h1>\\n```\\n\\n上面的三元其实就是 if else，如果仅仅需要 if，可以：\\n\\n```jsx\\n<h1>{ user.age > 18 && <div>成年</div> }<h1>\\n```\\n\\n强大！\\n\\n## 列表渲染\\n\\n数据源:\\n\\n```js\\nconst arr = [{\\n  message: 'foo',\\n}, {\\n  message: 'bar'\\n}]\\n```\\n\\nJSX 渲染:\\n\\n```jsx\\n<ul>\\n  {arr.map(item =>\\n    <li>{item.message}</li>\\n  )}\\n</ul>\\n```\\n\\n等同于:\\n\\n```jsx\\n<ul>\\n  {\\n    arr.map(item => {\\n      return <li>{item.message}</li>\\n    })\\n  }\\n</ul>\\n```\\n\\n如果是 `{}` 包裹，就需要 `return`。如果需要 index:\\n\\n```jsx\\n<ul>\\n  {arr.map((item, index) =>\\n    <li>{index}: {item.message}</li>\\n  )}\\n</ul>\\n```\\n\\n## 综合例子\\n\\n这里举一个九九乘法表:\\n\\n```jsx\\nimport { define, render, WeElement } from 'omi'\\n\\ndefine('my-app', class extends WeElement {\\n\\n  static css = `span{\\n    display: inline-block;\\n    width: 68px;\\n  }`\\n\\n  render(props) {\\n    return (\\n      <div>\\n        {props.numbers.map((a, indexA) =>\\n          <div>\\n            {\\n              props.numbers.map((b, indexB) => {\\n                return indexA <= indexB && <span>{a}*{b}={a * b} </span>\\n              })\\n            }\\n          </div>\\n        )}\\n      </div>\\n    )\\n  }\\n})\\n\\nrender(<my-app numbers={[1, 2, 3, 4, 5, 6, 7, 8, 9]} />, 'body')\\n```\\n\\n结果展示:\\n\\n![](https://github.com/Tencent/omi/raw/master/assets/99.jpg)\\n\\n[→ 在线查看](https://tencent.github.io/omi/packages/omi/examples/99/)\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/10.e6acfca5.chunk.js","module.exports = \"## JSX\\n\\nJSX 是目前为止开发体验最棒、语法噪音最少、表达能力最强且图灵完备的 UI 表达式，模板引擎不完备，模板字符串图灵完备但是语法噪音太大。即：\\n\\n```js\\nJSX > JS\\n```\\n\\n## Hello JSX\\n\\n使用 JSX，可以在 JS 中书写闭合的 XML 标签来表达 DOM 结构等，比如:\\n\\n```jsx\\nconst element = <h1>Hello, world!</h1>\\n```\\n\\n## 数据绑定\\n\\n据绑定使用单括号将变量或表达式、或JS语句块包起来：\\n\\n```jsx\\n<h1>{user.name}</h1>\\n```\\n\\n在 Omi 的 render 里试试:\\n\\n```jsx\\ndefine('my-element', class extends WeElement {\\n  render(props) {\\n    return <h1>{props.name}</h1>\\n  }\\n})\\n```\\n\\n使用元素:\\n\\n```jsx\\n<my-element name='dntzhang' />\\n```\\n\\n还可以写表达式:\\n\\n```jsx\\n<h1>{user.age > 18 ? '成年' : '未成年'}<h1>\\n```\\n\\n表达式里也可以嵌入 JSX：\\n\\n```jsx\\n<h1>{ user.age > 18 ? <div>成年</div> : <div>未成年</div> }<h1>\\n```\\n\\n上面的三元其实就是 if else，如果仅仅需要 if，可以：\\n\\n```jsx\\n<h1>{ user.age > 18 && <div>成年</div> }<h1>\\n```\\n\\n强大！\\n\\n## 列表渲染\\n\\n数据源:\\n\\n```js\\nconst arr = [{\\n  message: 'foo',\\n}, {\\n  message: 'bar'\\n}]\\n```\\n\\nJSX 渲染:\\n\\n```jsx\\n<ul>\\n  {arr.map(item =>\\n    <li>{item.message}</li>\\n  )}\\n</ul>\\n```\\n\\n等同于:\\n\\n```jsx\\n<ul>\\n  {\\n    arr.map(item => {\\n      return <li>{item.message}</li>\\n    })\\n  }\\n</ul>\\n```\\n\\n如果是 `{}` 包裹，就需要 `return`。如果需要 index:\\n\\n```jsx\\n<ul>\\n  {arr.map((item, index) =>\\n    <li>{index}: {item.message}</li>\\n  )}\\n</ul>\\n```\\n\\n## 综合例子\\n\\n这里举一个九九乘法表:\\n\\n```jsx\\nimport { define, render, WeElement } from 'omi'\\n\\ndefine('my-app', class extends WeElement {\\n\\n  static css = `span{\\n    display: inline-block;\\n    width: 68px;\\n  }`\\n\\n  render(props) {\\n    return (\\n      <div>\\n        {props.numbers.map((a, indexA) =>\\n          <div>\\n            {\\n              props.numbers.map((b, indexB) => {\\n                return indexA <= indexB && <span>{a}*{b}={a * b} </span>\\n              })\\n            }\\n          </div>\\n        )}\\n      </div>\\n    )\\n  }\\n})\\n\\nrender(<my-app numbers={[1, 2, 3, 4, 5, 6, 7, 8, 9]} />, 'body')\\n```\\n\\n结果展示:\\n\\n![](https://github.com/Tencent/omi/raw/master/assets/99.jpg)\\n\\n[→ 在线查看](https://tencent.github.io/omi/packages/omi/examples/99/)\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/zh-cn/jsx.md\n// module id = 58\n// module chunks = 10"],"sourceRoot":""}