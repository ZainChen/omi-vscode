{"version":3,"sources":["../static/js/5.cbce913c.chunk.js","docs/zh-cn/props.md"],"names":["webpackJsonp","65","module","exports"],"mappings":"AAAAA,cAAc,IAERC,GACA,SAAUC,EAAQC,GCHxBD,EAAAC,QAAA","file":"static/js/5.cbce913c.chunk.js","sourcesContent":["webpackJsonp([5],{\n\n/***/ 65:\n/***/ (function(module, exports) {\n\nmodule.exports = \"\\n## Props\\n\\n通过 Props 向子组件传递数据，比如：\\n\\n```jsx\\nimport { WeElement, define, render } from 'omi'\\n\\ndefine('my-element', class extends WeElement {\\n  render(props) {\\n    return (\\n      <h1>Hello, {props.name}!</h1>\\n    )\\n  }\\n})\\n```\\n\\n使用元素:\\n\\n```jsx\\n<my-element name=\\\"world\\\"></my-element>\\n```\\n\\n你也可以传任意类型的数据给 props:\\n\\n```jsx\\ndefine('my-element', class extends WeElement {\\n  render(props) {\\n    return (\\n      <h1>Hello, {props.myObj.name}!</h1>\\n    )\\n  }\\n})\\n```\\n\\n使用元素:\\n\\n```jsx\\n<my-element myObj={{ name: 'world' }}></my-element>\\n```\\n\\n你可以通过静态属性 `static defaultProps` 来设置默认值，使用 `static propTypes` 来设置类型:\\n\\n```jsx\\ndefine('my-element', class extends WeElement {\\n  static defaultProps = {\\n\\t\\tname: 'Omi',\\n\\t\\tmyAge: 18\\n  }\\n  \\n  static propTypes = {\\n\\t\\tname: String,\\n\\t\\tmyAge: Number\\n\\t}\\n\\n  render(props) {\\n    return (\\n      <h1>Hello, {props.name}! Age {props.myAge}</h1>\\n    )\\n  }\\n})\\n```\\n\\n需要特别注意，如果你的自定义元素想要直接在其他框架或者无框架的情况下原生使用，请一定要加上 `static propTypes` 才能生效。比如，这样就可以直接在 body 中使用:\\n\\n```html\\n<body>\\n  <my-element name=\\\"dntzhang\\\" my-age=\\\"20\\\"></my-element>\\n</body>\\n```\\n\\n### 高级技巧\\n\\n这里介绍一次性使用 prop 的技巧:\\n\\n```jsx\\ndefine('my-element', class extends WeElement {\\n  install() {\\n    this.name = this.props.name\\n  }\\n\\n  render() {\\n    return (\\n      <h1>Hello, {this.name}!</h1>\\n    )\\n  }\\n})\\n```\\n\\n下次父组件 update 并且修改了 props 也不会影响到该组件。\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/5.cbce913c.chunk.js","module.exports = \"\\n## Props\\n\\n通过 Props 向子组件传递数据，比如：\\n\\n```jsx\\nimport { WeElement, define, render } from 'omi'\\n\\ndefine('my-element', class extends WeElement {\\n  render(props) {\\n    return (\\n      <h1>Hello, {props.name}!</h1>\\n    )\\n  }\\n})\\n```\\n\\n使用元素:\\n\\n```jsx\\n<my-element name=\\\"world\\\"></my-element>\\n```\\n\\n你也可以传任意类型的数据给 props:\\n\\n```jsx\\ndefine('my-element', class extends WeElement {\\n  render(props) {\\n    return (\\n      <h1>Hello, {props.myObj.name}!</h1>\\n    )\\n  }\\n})\\n```\\n\\n使用元素:\\n\\n```jsx\\n<my-element myObj={{ name: 'world' }}></my-element>\\n```\\n\\n你可以通过静态属性 `static defaultProps` 来设置默认值，使用 `static propTypes` 来设置类型:\\n\\n```jsx\\ndefine('my-element', class extends WeElement {\\n  static defaultProps = {\\n\\t\\tname: 'Omi',\\n\\t\\tmyAge: 18\\n  }\\n  \\n  static propTypes = {\\n\\t\\tname: String,\\n\\t\\tmyAge: Number\\n\\t}\\n\\n  render(props) {\\n    return (\\n      <h1>Hello, {props.name}! Age {props.myAge}</h1>\\n    )\\n  }\\n})\\n```\\n\\n需要特别注意，如果你的自定义元素想要直接在其他框架或者无框架的情况下原生使用，请一定要加上 `static propTypes` 才能生效。比如，这样就可以直接在 body 中使用:\\n\\n```html\\n<body>\\n  <my-element name=\\\"dntzhang\\\" my-age=\\\"20\\\"></my-element>\\n</body>\\n```\\n\\n### 高级技巧\\n\\n这里介绍一次性使用 prop 的技巧:\\n\\n```jsx\\ndefine('my-element', class extends WeElement {\\n  install() {\\n    this.name = this.props.name\\n  }\\n\\n  render() {\\n    return (\\n      <h1>Hello, {this.name}!</h1>\\n    )\\n  }\\n})\\n```\\n\\n下次父组件 update 并且修改了 props 也不会影响到该组件。\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/zh-cn/props.md\n// module id = 65\n// module chunks = 5"],"sourceRoot":""}