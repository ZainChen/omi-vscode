{"version":3,"sources":["../static/js/7.70efbb66.chunk.js","docs/zh-cn/omip.md"],"names":["webpackJsonp","61","module","exports"],"mappings":"AAAAA,cAAc,IAERC,GACA,SAAUC,EAAQC,GCHxBD,EAAAC,QAAA","file":"static/js/7.70efbb66.chunk.js","sourcesContent":["webpackJsonp([7],{\n\n/***/ 61:\n/***/ (function(module, exports) {\n\nmodule.exports = \"## Omip\\n\\n使用 Omi 开发小程序或 H5 SPA\\n\\n> 现在，Omi 不仅仅可以开发桌面 Web、移动 H5，还可以直接开发小程序！\\n\\n* Write Once, Run Anywhere\\n* Learn Once, Write Anywhere\\n\\n![](https://github.com/Tencent/omi/raw/master/assets/omip-pv.png)\\n\\n## Omip 特性\\n\\n* 一次学习，多处开发，一次开发，多处运行\\n* 使用 JSX，表达能力和编程体验大于模板\\n* 支持使用 npm/yarn 安装管理第三方依赖\\n* 支持使用 ES6+\\n* 支持使用 CSS 预编译器\\n* 小程序 API 优化，异步 API Promise 化\\n* 超轻量的依赖包，顺从小程序标签和组件的设计\\n\\n## 快速开始\\n\\n```bash\\nnpm i omi-cli -g\\nomi init-p my-app\\ncd my-app\\nnpm start        //开发小程序\\nnpm run dev:h5   //开发 h5\\nnpm run build:h5 //发布 h5\\n```\\n> node 版本要求 >= 8\\n\\n> 也支持一条命令 `npx omi-cli init-p my-app` (npm v5.2.0+)\\n\\n把小程序目录设置到 dist 目录就可以愉快地调试了！\\n\\n也可以初始化 TypeScript 模板项目:\\n\\n```js\\nomi init-p-ts my-app\\n```\\n\\n> 也支持一条命令 `npx omi-cli init-p-ts my-app` (npm v5.2.0+)\\n\\n## 代码示例\\n\\n```jsx\\nimport { WeElement, define } from 'omi'\\nimport './index.css'\\n\\ndefine('page-counter', class extends WeElement {\\n  config = {\\n    navigationBarTitleText: 'Counter'\\n  }\\n\\n  data = {\\n    count: 1\\n  }\\n\\n  sub = () => {\\n    this.data.count--\\n    this.update()\\n  }\\n\\n  add = () => {\\n    this.data.count++\\n    this.update()\\n  }\\n\\n  render() {\\n    return (\\n      <view>\\n        <button onClick={this.sub}>-</button>\\n        <text>{this.data.count}</text>\\n        <button onClick={this.add}>+</button>\\n      </view>\\n    )\\n  }\\n})\\n```\\n\\n## 扩展\\n\\n`this.update` 方法可以传递最短路径，进行更新，比如下面两种写法是等价的。\\n\\n```js\\nthis.update({\\n  count: 1\\n})\\n```\\n\\n等价于:\\n\\n```js\\nthis.data.count = 1\\nthis.update()\\n```\\n\\n也可以和 setData 一样传递 path:\\n\\n```js\\nthis.update({\\n  'list[1].obj.name': 'Omip'\\n})\\n```\\n\\n由于小程序视图更新是异步的，如果需要获取视图更新后的回调，可以使用第二个参数:\\n\\n```js\\nthis.update({\\n  'list[1].obj.name': 'Omip'\\n}, () => {\\n  console.log('更新完成')\\n})\\n```\\n\\n或者只有一个参数，且该参数为函数:\\n\\n```js\\nthis.update(() => {\\n  console.log('更新完成')\\n})\\n```\\n\\n## 注意事项\\n\\n在 JSX 或者一些要使用图片资源的 API，需要使用 import 或者 require 先导入图片再使用，不能直接使用相对地址！\\n\\n如：\\n\\n```js\\n onShareAppMessage(){\\n\\t\\treturn {\\n      title: '分享标题',\\n      path: '/pages/index/index?id=123',\\n      imageUrl: require('./share.jpg'),\\n      success: (res) => {\\n        console.log(\\\"转发成功\\\", res);\\n      },\\n      fail: (res) => {\\n        console.log(\\\"转发失败\\\", res);\\n      }\\n    }\\n  }\\n```\\n\\n再比如:\\n\\n```jsx\\nimport src from './my-image.png'\\n...\\n...\\n\\n\\n  render() {\\n    return (\\n      <view>\\n        <image src={src}></image>\\n      </view>\\n    )\\n  }\\n...\\n...\\n\\n```\\n\\n## 获取最新的 omip 版本\\n\\n你只需要重新拉去模板便可以更新到最新的 omip:\\n\\n```\\nomi init-p my-app\\n```\\n\\n## 实战案例\\n\\n![](../../assets/omip-douban-list.png)\\n\\n![](../../assets/omip-douban-detail.png)\\n\\n## License\\n\\nMIT © dntzhang\\n\\n#### Open Source Software Licensed Under the MIT License:\\n\\n[tarojs](https://github.com/NervJS/taro) 1.2.13\\nCopyright (c) 2019 O2Team\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/7.70efbb66.chunk.js","module.exports = \"## Omip\\n\\n使用 Omi 开发小程序或 H5 SPA\\n\\n> 现在，Omi 不仅仅可以开发桌面 Web、移动 H5，还可以直接开发小程序！\\n\\n* Write Once, Run Anywhere\\n* Learn Once, Write Anywhere\\n\\n![](https://github.com/Tencent/omi/raw/master/assets/omip-pv.png)\\n\\n## Omip 特性\\n\\n* 一次学习，多处开发，一次开发，多处运行\\n* 使用 JSX，表达能力和编程体验大于模板\\n* 支持使用 npm/yarn 安装管理第三方依赖\\n* 支持使用 ES6+\\n* 支持使用 CSS 预编译器\\n* 小程序 API 优化，异步 API Promise 化\\n* 超轻量的依赖包，顺从小程序标签和组件的设计\\n\\n## 快速开始\\n\\n```bash\\nnpm i omi-cli -g\\nomi init-p my-app\\ncd my-app\\nnpm start        //开发小程序\\nnpm run dev:h5   //开发 h5\\nnpm run build:h5 //发布 h5\\n```\\n> node 版本要求 >= 8\\n\\n> 也支持一条命令 `npx omi-cli init-p my-app` (npm v5.2.0+)\\n\\n把小程序目录设置到 dist 目录就可以愉快地调试了！\\n\\n也可以初始化 TypeScript 模板项目:\\n\\n```js\\nomi init-p-ts my-app\\n```\\n\\n> 也支持一条命令 `npx omi-cli init-p-ts my-app` (npm v5.2.0+)\\n\\n## 代码示例\\n\\n```jsx\\nimport { WeElement, define } from 'omi'\\nimport './index.css'\\n\\ndefine('page-counter', class extends WeElement {\\n  config = {\\n    navigationBarTitleText: 'Counter'\\n  }\\n\\n  data = {\\n    count: 1\\n  }\\n\\n  sub = () => {\\n    this.data.count--\\n    this.update()\\n  }\\n\\n  add = () => {\\n    this.data.count++\\n    this.update()\\n  }\\n\\n  render() {\\n    return (\\n      <view>\\n        <button onClick={this.sub}>-</button>\\n        <text>{this.data.count}</text>\\n        <button onClick={this.add}>+</button>\\n      </view>\\n    )\\n  }\\n})\\n```\\n\\n## 扩展\\n\\n`this.update` 方法可以传递最短路径，进行更新，比如下面两种写法是等价的。\\n\\n```js\\nthis.update({\\n  count: 1\\n})\\n```\\n\\n等价于:\\n\\n```js\\nthis.data.count = 1\\nthis.update()\\n```\\n\\n也可以和 setData 一样传递 path:\\n\\n```js\\nthis.update({\\n  'list[1].obj.name': 'Omip'\\n})\\n```\\n\\n由于小程序视图更新是异步的，如果需要获取视图更新后的回调，可以使用第二个参数:\\n\\n```js\\nthis.update({\\n  'list[1].obj.name': 'Omip'\\n}, () => {\\n  console.log('更新完成')\\n})\\n```\\n\\n或者只有一个参数，且该参数为函数:\\n\\n```js\\nthis.update(() => {\\n  console.log('更新完成')\\n})\\n```\\n\\n## 注意事项\\n\\n在 JSX 或者一些要使用图片资源的 API，需要使用 import 或者 require 先导入图片再使用，不能直接使用相对地址！\\n\\n如：\\n\\n```js\\n onShareAppMessage(){\\n\\t\\treturn {\\n      title: '分享标题',\\n      path: '/pages/index/index?id=123',\\n      imageUrl: require('./share.jpg'),\\n      success: (res) => {\\n        console.log(\\\"转发成功\\\", res);\\n      },\\n      fail: (res) => {\\n        console.log(\\\"转发失败\\\", res);\\n      }\\n    }\\n  }\\n```\\n\\n再比如:\\n\\n```jsx\\nimport src from './my-image.png'\\n...\\n...\\n\\n\\n  render() {\\n    return (\\n      <view>\\n        <image src={src}></image>\\n      </view>\\n    )\\n  }\\n...\\n...\\n\\n```\\n\\n## 获取最新的 omip 版本\\n\\n你只需要重新拉去模板便可以更新到最新的 omip:\\n\\n```\\nomi init-p my-app\\n```\\n\\n## 实战案例\\n\\n![](../../assets/omip-douban-list.png)\\n\\n![](../../assets/omip-douban-detail.png)\\n\\n## License\\n\\nMIT © dntzhang\\n\\n#### Open Source Software Licensed Under the MIT License:\\n\\n[tarojs](https://github.com/NervJS/taro) 1.2.13\\nCopyright (c) 2019 O2Team\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/zh-cn/omip.md\n// module id = 61\n// module chunks = 7"],"sourceRoot":""}