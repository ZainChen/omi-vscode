{"version":3,"sources":["../static/js/17.d859539c.chunk.js","docs/en/ssr.md"],"names":["webpackJsonp","51","module","exports"],"mappings":"AAAAA,cAAc,KAERC,GACA,SAAUC,EAAQC,GCHxBD,EAAAC,QAAA","file":"static/js/17.d859539c.chunk.js","sourcesContent":["webpackJsonp([17],{\n\n/***/ 51:\n/***/ (function(module, exports) {\n\nmodule.exports = \"## Server-Side Rendering\\n\\nServer-Side Rendering(SSR) has two advantages:\\n\\n* Be friendly to SEO\\n* Faster First Screen Display Time\\n\\nServer-side rendering (SSR) also has drawbacks, such as increasing server-side overhead. Developers can weigh whether to use SSR or pre-render directly with [omi-snap](https://github.com/Tencent/omi/blob/master/tutorial/omi-snap.cn.md). Pre-rendering does not require additional server-side overhead and generates skeleton screen directly at the time of construction, so there is no dynamic data content. SSR can return HTML generated by dynamic data, and also the serialization data can be returned with HTML.\\n\\n## Usage\\n\\n```bash\\n$ npm i omi-cli -g      # install cli\\n$ omi init-s my-app     # init project\\n$ cd my-app           \\n$ npm start             # develop\\n$ npm run build         # release\\n```\\n\\n## Principle\\n\\nDefine component:\\n\\n```jsx\\nimport { WeElement, define } from 'omio'\\n\\ndefine('my-element', class extends WeElement {\\n  install() {\\n    this.data = { liked: false }\\n  }\\n\\n  static css = 'button{ color: red; }'\\n\\n  render() {\\n    if (this.data.liked) {\\n      return 'You liked this.'\\n    }\\n\\n    return <button onClick={() => {\\n      this.data.liked = true\\n      this.update()\\n    }} >Like</button>\\n  }\\n})\\n```\\n\\nNote that omio is used here, SSR can only use omio, not omi, because OMI is web components, node can not render web components.\\n\\n> Both OMI and omio projects must use omio for SSR\\n\\nStart a node server:\\n\\n```jsx\\nvar express = require('express')\\nvar app = express()\\nvar Omi = require('omio')\\nrequire('./my-element')\\n\\napp.get('/', function (req, res) {\\n  const obj = Omi.renderToString(<my-element />)\\n  res.end(`<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <title>Omi SSR</title>\\n    ${toString(obj.css)}\\n  </head>\\n  <body>${obj.html}</body>\\n</html>`)\\n})\\n\\nfunction toString(css){\\n  return (\\n     css.map(style => {\\n          return `<style id=\\\"${style.id}\\\">${style.css}</style>`\\n      }\\n    ))\\n  )\\n}\\n\\napp.listen(3000)\\n```\\n\\nRendering HTML structure:\\n\\n```html\\n<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <title>Omi SSR</title>\\n    <style type=\\\"text/css\\\" id=\\\"_ss0\\\">button[_ss0]{color:red;}</style>\\n  </head>\\n  <body><button _ss0>Like</button></body>\\n</html>\\n```\\n\\nPreview:\\n\\n![](https://github.com/Tencent/omi/raw/master/assets/hello-ssr.png)\\n\\n\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/17.d859539c.chunk.js","module.exports = \"## Server-Side Rendering\\n\\nServer-Side Rendering(SSR) has two advantages:\\n\\n* Be friendly to SEO\\n* Faster First Screen Display Time\\n\\nServer-side rendering (SSR) also has drawbacks, such as increasing server-side overhead. Developers can weigh whether to use SSR or pre-render directly with [omi-snap](https://github.com/Tencent/omi/blob/master/tutorial/omi-snap.cn.md). Pre-rendering does not require additional server-side overhead and generates skeleton screen directly at the time of construction, so there is no dynamic data content. SSR can return HTML generated by dynamic data, and also the serialization data can be returned with HTML.\\n\\n## Usage\\n\\n```bash\\n$ npm i omi-cli -g      # install cli\\n$ omi init-s my-app     # init project\\n$ cd my-app           \\n$ npm start             # develop\\n$ npm run build         # release\\n```\\n\\n## Principle\\n\\nDefine component:\\n\\n```jsx\\nimport { WeElement, define } from 'omio'\\n\\ndefine('my-element', class extends WeElement {\\n  install() {\\n    this.data = { liked: false }\\n  }\\n\\n  static css = 'button{ color: red; }'\\n\\n  render() {\\n    if (this.data.liked) {\\n      return 'You liked this.'\\n    }\\n\\n    return <button onClick={() => {\\n      this.data.liked = true\\n      this.update()\\n    }} >Like</button>\\n  }\\n})\\n```\\n\\nNote that omio is used here, SSR can only use omio, not omi, because OMI is web components, node can not render web components.\\n\\n> Both OMI and omio projects must use omio for SSR\\n\\nStart a node server:\\n\\n```jsx\\nvar express = require('express')\\nvar app = express()\\nvar Omi = require('omio')\\nrequire('./my-element')\\n\\napp.get('/', function (req, res) {\\n  const obj = Omi.renderToString(<my-element />)\\n  res.end(`<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <title>Omi SSR</title>\\n    ${toString(obj.css)}\\n  </head>\\n  <body>${obj.html}</body>\\n</html>`)\\n})\\n\\nfunction toString(css){\\n  return (\\n     css.map(style => {\\n          return `<style id=\\\"${style.id}\\\">${style.css}</style>`\\n      }\\n    ))\\n  )\\n}\\n\\napp.listen(3000)\\n```\\n\\nRendering HTML structure:\\n\\n```html\\n<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <title>Omi SSR</title>\\n    <style type=\\\"text/css\\\" id=\\\"_ss0\\\">button[_ss0]{color:red;}</style>\\n  </head>\\n  <body><button _ss0>Like</button></body>\\n</html>\\n```\\n\\nPreview:\\n\\n![](https://github.com/Tencent/omi/raw/master/assets/hello-ssr.png)\\n\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/en/ssr.md\n// module id = 51\n// module chunks = 17"],"sourceRoot":""}